// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingAPI.AppData;

#nullable disable

namespace ParkingAPI.Migrations
{
    [DbContext(typeof(AccountContext))]
    partial class AccountContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 12,
                            Email = "hopeannabri@gmail.com",
                            FamilyName = "Peterson Family",
                            Phone = "111-222-3333"
                        },
                        new
                        {
                            Id = 14,
                            Email = "FakeEmail@gmail.com",
                            FamilyName = "Hanson Family",
                            Phone = "333-444-5555"
                        },
                        new
                        {
                            Id = 15,
                            Email = "FakeEmail2@gmail.com",
                            FamilyName = "Tran Family",
                            Phone = "777-888-9999"
                        });
                });

            modelBuilder.Entity("ParkingSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTaken")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("ParkingSpaces", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 201,
                            IsTaken = true,
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 202,
                            IsTaken = false
                        },
                        new
                        {
                            Id = 101,
                            IsTaken = true,
                            VehicleId = 3
                        },
                        new
                        {
                            Id = 111,
                            IsTaken = true,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 113,
                            IsTaken = true,
                            VehicleId = 4
                        });
                });

            modelBuilder.Entity("Resident", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AltPhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Residents", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 8,
                            AccountId = 12,
                            FirstName = "Brianna",
                            LastName = "Peterson"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 12,
                            AltPhoneNumber = "222-444-9999",
                            FirstName = "Jace",
                            LastName = "Peterson"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 14,
                            FirstName = "Anna",
                            LastName = "Hanson"
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 15,
                            FirstName = "Sydney",
                            LastName = "Tran"
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 15,
                            AltPhoneNumber = "555-555-9999",
                            FirstName = "Emmanuel",
                            LastName = "Rocha"
                        });
                });

            modelBuilder.Entity("Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SpotId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Vehicles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 12,
                            Color = "Black",
                            LicensePlate = "",
                            Make = "Toyota",
                            Model = "Corolla",
                            SpotId = 111
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 14,
                            Color = "Blue",
                            LicensePlate = "",
                            Make = "Honda",
                            Model = "Civic",
                            SpotId = 201
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 15,
                            Color = "Red",
                            LicensePlate = "",
                            Make = "Honda",
                            Model = "Accord",
                            SpotId = 101
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 15,
                            Color = "Silver",
                            LicensePlate = "",
                            Make = "Subaru",
                            Model = "Crosstrek",
                            SpotId = 113
                        });
                });

            modelBuilder.Entity("ParkingSpace", b =>
                {
                    b.HasOne("Vehicle", "Vehicle")
                        .WithOne("ParkingSpace")
                        .HasForeignKey("ParkingSpace", "VehicleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Resident", b =>
                {
                    b.HasOne("Account", "Account")
                        .WithMany("Residents")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Vehicle", b =>
                {
                    b.HasOne("Account", "Account")
                        .WithMany("Vehicles")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Account", b =>
                {
                    b.Navigation("Residents");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Vehicle", b =>
                {
                    b.Navigation("ParkingSpace");
                });
#pragma warning restore 612, 618
        }
    }
}
